// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetApi.Data;

namespace NetApi.Migrations
{
    [DbContext(typeof(MovieContext))]
    [Migration("20200210065552_UpdateBroadcastDate")]
    partial class UpdateBroadcastDate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("NetApi.Models.Broadcast", b =>
                {
                    b.Property<int>("broadcastId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("broadcastId")
                        .HasColumnType("int(10)");

                    b.Property<DateTime>("dates")
                        .HasColumnName("dates")
                        .HasColumnType("datetime");

                    b.Property<int>("filmId")
                        .HasColumnName("filmId")
                        .HasColumnType("int(10)");

                    b.Property<int>("houseId")
                        .HasColumnName("houseId")
                        .HasColumnType("int(10)");

                    b.HasKey("broadcastId");

                    b.HasIndex("filmId");

                    b.HasIndex("houseId");

                    b.ToTable("broadcasts");
                });

            modelBuilder.Entity("NetApi.Models.Comment", b =>
                {
                    b.Property<int>("commentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("commentId")
                        .HasColumnType("int(10)");

                    b.Property<string>("comment")
                        .IsRequired()
                        .HasColumnName("comment")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("filmId")
                        .HasColumnName("filmId")
                        .HasColumnType("int(10)");

                    b.Property<int>("userId")
                        .HasColumnName("userId")
                        .HasColumnType("int(10)");

                    b.HasKey("commentId");

                    b.HasIndex("filmId");

                    b.HasIndex("userId");

                    b.ToTable("comments");
                });

            modelBuilder.Entity("NetApi.Models.Film", b =>
                {
                    b.Property<int>("filmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("filmId")
                        .HasColumnType("int(10)");

                    b.Property<string>("category")
                        .IsRequired()
                        .HasColumnName("category")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("director")
                        .IsRequired()
                        .HasColumnName("director")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("duration")
                        .HasColumnName("duration")
                        .HasColumnType("int(5)");

                    b.Property<string>("filmName")
                        .IsRequired()
                        .HasColumnName("filmName")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(50);

                    b.Property<string>("language")
                        .IsRequired()
                        .HasColumnName("language")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10);

                    b.HasKey("filmId");

                    b.ToTable("films");
                });

            modelBuilder.Entity("NetApi.Models.House", b =>
                {
                    b.Property<int>("houseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("houseId")
                        .HasColumnType("int(10)");

                    b.Property<int>("houseColumn")
                        .HasColumnName("houseColumn")
                        .HasColumnType("int(10)");

                    b.Property<int>("houseRow")
                        .HasColumnName("houseRow")
                        .HasColumnType("int(10)");

                    b.HasKey("houseId");

                    b.ToTable("houses");
                });

            modelBuilder.Entity("NetApi.Models.Ticket", b =>
                {
                    b.Property<int>("ticketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ticketId")
                        .HasColumnType("int(10)");

                    b.Property<int>("broadcastId")
                        .HasColumnName("broadcastId")
                        .HasColumnType("int(10)");

                    b.Property<DateTime>("lastUpdatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("lastUpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("seatName")
                        .IsRequired()
                        .HasColumnName("seatName")
                        .HasColumnType("varchar(10)");

                    b.Property<int>("seatNo")
                        .HasColumnName("seatNo")
                        .HasColumnType("int(5)");

                    b.Property<int>("ticketFee")
                        .HasColumnName("ticketFee")
                        .HasColumnType("int(5)");

                    b.Property<string>("ticketType")
                        .IsRequired()
                        .HasColumnName("ticketType")
                        .HasColumnType("enum('student', 'adult')");

                    b.Property<int>("userId")
                        .HasColumnName("userId")
                        .HasColumnType("int(10)");

                    b.Property<bool>("valid")
                        .HasColumnName("valid")
                        .HasColumnType("boolean");

                    b.HasKey("ticketId");

                    b.HasIndex("broadcastId");

                    b.HasIndex("userId");

                    b.ToTable("tickets");
                });

            modelBuilder.Entity("NetApi.Models.TodoItem", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("isComplete")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.ToTable("TodoItems");
                });

            modelBuilder.Entity("NetApi.Models.User", b =>
                {
                    b.Property<int>("userId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("userId")
                        .HasColumnType("int(10)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnName("password")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(50);

                    b.HasKey("userId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("NetApi.Models.Broadcast", b =>
                {
                    b.HasOne("NetApi.Models.Film", "film")
                        .WithMany()
                        .HasForeignKey("filmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetApi.Models.House", "house")
                        .WithMany()
                        .HasForeignKey("houseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetApi.Models.Comment", b =>
                {
                    b.HasOne("NetApi.Models.Film", "film")
                        .WithMany("comments")
                        .HasForeignKey("filmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetApi.Models.User", "author")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetApi.Models.Ticket", b =>
                {
                    b.HasOne("NetApi.Models.Broadcast", null)
                        .WithMany("tickets")
                        .HasForeignKey("broadcastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetApi.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
